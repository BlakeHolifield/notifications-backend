{"version":3,"sources":["generated/OpenapiInternal.ts","pages/AggregationPage.tsx","services/CreateEventTypes.ts","services/GetApplication.ts","services/GetBundles.ts","services/GetEventTypes.ts","services/RenderEmailRequest.ts","pages/RenderEmailPage.tsx","Routes.tsx","pages/ApplicationPage.tsx","app/Navigation.tsx","app/redhat-logo.svg","app/App.tsx","index.tsx"],"names":["aggregationTemplate","trimLeft","zodSchemaApplication","zodSchemaBasicAuthentication","z","actions","zodSchemaBehaviorGroupAction","optional","nullable","bundle","zodSchemaBundle","bundle_id","zodSchemaUUID","created","display_name","id","updated","nonstrict","zodSchemaBehaviorGroupActionId","zodSchemaCamelProperties","end_time","start_time","status","zodSchemaStatus","zodSchemaEmailSubscriptionProperties","zodSchemaEndpoint","data","links","meta","zodSchemaMeta","zodSchemaEndpointType","zodSchemaEventLogEntry","zodSchemaEventLogEntryAction","application","application_id","description","name","displayName","zodSchemaHttpType","details","endpointId","invocationResult","invocationTime","int","body_template","payload","subject_template","only_admins","zodSchemaWebhookProperties","max","password","username","endpoint","behaviorGroupId","basic_authentication","disable_ssl_verification","extras","secret_token","sub_type","url","group_id","ignore_preferences","enabled","properties","type","event_type","endpoint_type","invocation_result","count","method","Schemas","InternalServiceHttpRoot","actionBuilder","queryParams","config","rules","ValidateRule","__Empty","build","AdminServiceDebugRbac","params","query","undefined","rhid","AdminServiceSetAdminDown","InternalServiceCreateApplication","body","Application","InternalServiceGetApplication","path","replace","appId","toString","InternalServiceUpdateApplication","Response200","InternalServiceDeleteApplication","EventType","InternalServiceGetEventTypes","Bundle","InternalServiceGetBundles","InternalServiceCreateBundle","InternalServiceGetBundle","bundleId","InternalServiceUpdateBundle","InternalServiceDeleteBundle","InternalServiceGetApplications","InternalServiceCreateEventType","InternalServiceUpdateEventType","eventTypeId","InternalServiceDeleteEventType","InternalServiceSetCurrentStatus","subject","Response400","message","InternalServiceRenderEmailTemplate","Operations","actionCreator","applicationId","validateResponse","validationResponseTransformer","applicationTypes","value","validatedResponse","errors","useBundles","client","useClient","mounted","useUnmountPromise","useState","bundles","setBundles","isLoading","setLoading","useCallback","a","cQuery","bundleResponse","map","applications","applicationsPromises","push","Promise","all","applicationResponses","reducedBundles","r","reduce","produce","draftBundles","draftBundle","find","b","resolve","useEffect","eventTypes","defaultSubjectTemplate","defaultBodyTemplate","defaultPayload","JSON","stringify","timestamp","account_id","context","events","metadata","RenderedTemplate","props","Spinner","succeeded","StackItem","width","srcDoc","HelperText","HelperTextItem","variant","error","linkTo","pathRoutes","component","onEditorDidMount","React","editor","monaco","layout","focus","getModels","updateOptions","tabSize","onChange","_value","controls","useMemo","CodeEditorControl","icon","toolTipText","onClick","console","log","isVisible","PageSection","Title","headingLevel","CodeEditor","isDownloadEnabled","isUploadEnabled","customControls","isLineNumbersVisible","isLanguageLabelVisible","isMinimapVisible","language","Language","javascript","code","height","useParams","eventTypesQuery","useQuery","queryPayload","useEventTypes","applicationTypesQuery","useApplicationTypes","getBundle","newEvent","useMutation","eventType","setEventType","showModal","setShowModal","isEdit","setIsEdit","handleSubmit","mutate","then","handleChange","event","target","prev","loading","errorObject","length","Breadcrumb","BreadcrumbItem","to","isActive","TableComposable","aria-label","Thead","Toolbar","ToolbarContent","ToolbarItem","Button","Modal","ModalVariant","medium","title","isOpen","onClose","Form","isHorizontal","FormGroup","label","fieldId","isRequired","helperText","TextInput","defaultValue","TextArea","ActionGroup","Tr","column","columnIndex","Th","Tbody","e","Td","className","editEventType","renderedProps","emailTemplate","subjectTemplate","setSubjectTemplate","bodyTemplate","setBodyTemplate","setPayload","onRender","Split","SplitItem","isFilled","Stack","json","Routes","_props","pathRoute","EnhancedNavItem","match","useRouteMatch","exact","NavItem","children","Navigation","Nav","NavList","NavGroup","NavExpandable","NavItemSeparator","App","isNavOpen","setNavOpen","onNavToggle","appHeader","PageHeader","showNavToggle","logo","Brand","src","alt","logoProps","href","Page","header","appSidebar","PageSidebar","nav","sidebar","createClient","responseInterceptors","validateSchemaResponseInterceptor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a3e9602.chunk.js","sourcesContent":["/* eslint-disable */\n/**\n * Generated code, DO NOT modify directly.\n */\nimport { ValidatedResponse } from 'openapi2typescript';\nimport { ValidateRule } from 'openapi2typescript';\nimport {\n    actionBuilder,\n    ActionValidatableConfig\n} from 'openapi2typescript/react-fetching-library';\nimport { Action } from 'react-fetching-library';\nimport * as z from 'zod';\n\nexport namespace Schemas {\n  export const Application = zodSchemaApplication();\n  export type Application = {\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const BasicAuthentication = zodSchemaBasicAuthentication();\n  export type BasicAuthentication = {\n    password?: string | undefined | null;\n    username?: string | undefined | null;\n  };\n\n  export const BehaviorGroup = zodSchemaBehaviorGroup();\n  export type BehaviorGroup = {\n    actions?: Array<BehaviorGroupAction> | undefined | null;\n    bundle?: Bundle | undefined | null;\n    bundle_id: UUID;\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    updated?: string | undefined | null;\n  };\n\n  export const BehaviorGroupAction = zodSchemaBehaviorGroupAction();\n  export type BehaviorGroupAction = {\n    created?: string | undefined | null;\n    endpoint?: Endpoint | undefined | null;\n    id?: BehaviorGroupActionId | undefined | null;\n  };\n\n  export const BehaviorGroupActionId = zodSchemaBehaviorGroupActionId();\n  export type BehaviorGroupActionId = {\n    behaviorGroupId: UUID;\n    endpointId: UUID;\n  };\n\n  export const Bundle = zodSchemaBundle();\n  export type Bundle = {\n    created?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n    updated?: string | undefined | null;\n  };\n\n  export const CamelProperties = zodSchemaCamelProperties();\n  export type CamelProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    extras?:\n      | {\n          [x: string]: string;\n        }\n      | undefined\n      | null;\n    secret_token?: string | undefined | null;\n    sub_type?: string | undefined | null;\n    url: string;\n  };\n\n  export const CurrentStatus = zodSchemaCurrentStatus();\n  export type CurrentStatus = {\n    end_time?: string | undefined | null;\n    start_time?: string | undefined | null;\n    status: Status;\n  };\n\n  export const EmailSubscriptionProperties =\n    zodSchemaEmailSubscriptionProperties();\n  export type EmailSubscriptionProperties = {\n    group_id?: UUID | undefined | null;\n    ignore_preferences: boolean;\n    only_admins: boolean;\n  };\n\n  export const EmailSubscriptionType = zodSchemaEmailSubscriptionType();\n  export type EmailSubscriptionType = 'DAILY' | 'INSTANT';\n\n  export const Endpoint = zodSchemaEndpoint();\n  export type Endpoint = {\n    created?: string | undefined | null;\n    description: string;\n    enabled?: boolean | undefined | null;\n    id?: UUID | undefined | null;\n    name: string;\n    properties?:\n      | (WebhookProperties | EmailSubscriptionProperties | CamelProperties)\n      | undefined\n      | null;\n    type: EndpointType;\n    updated?: string | undefined | null;\n  };\n\n  export const EndpointPage = zodSchemaEndpointPage();\n  export type EndpointPage = {\n    data: Array<Endpoint>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const EndpointProperties = zodSchemaEndpointProperties();\n  export type EndpointProperties = unknown;\n\n  export const EndpointType = zodSchemaEndpointType();\n  export type EndpointType =\n    | 'webhook'\n    | 'email_subscription'\n    | 'default'\n    | 'camel';\n\n  export const EventLogEntry = zodSchemaEventLogEntry();\n  export type EventLogEntry = {\n    actions: Array<EventLogEntryAction>;\n    application: string;\n    bundle: string;\n    created: string;\n    event_type: string;\n    id: UUID;\n  };\n\n  export const EventLogEntryAction = zodSchemaEventLogEntryAction();\n  export type EventLogEntryAction = {\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpoint_type: EndpointType;\n    id: UUID;\n    invocation_result: boolean;\n  };\n\n  export const EventType = zodSchemaEventType();\n  export type EventType = {\n    application?: Application | undefined | null;\n    application_id: UUID;\n    description?: string | undefined | null;\n    display_name: string;\n    id?: UUID | undefined | null;\n    name: string;\n  };\n\n  export const Facet = zodSchemaFacet();\n  export type Facet = {\n    displayName: string;\n    id: string;\n    name: string;\n  };\n\n  export const HttpType = zodSchemaHttpType();\n  export type HttpType = 'GET' | 'POST' | 'PUT';\n\n  export const Meta = zodSchemaMeta();\n  export type Meta = {\n    count: number;\n  };\n\n  export const NotificationHistory = zodSchemaNotificationHistory();\n  export type NotificationHistory = {\n    created?: string | undefined | null;\n    details?:\n      | {\n          [x: string]: unknown;\n        }\n      | undefined\n      | null;\n    endpointId?: UUID | undefined | null;\n    id?: UUID | undefined | null;\n    invocationResult: boolean;\n    invocationTime: number;\n  };\n\n  export const PageEventLogEntry = zodSchemaPageEventLogEntry();\n  export type PageEventLogEntry = {\n    data: Array<EventLogEntry>;\n    links: {\n      [x: string]: string;\n    };\n    meta: Meta;\n  };\n\n  export const RenderEmailTemplateRequest =\n    zodSchemaRenderEmailTemplateRequest();\n  export type RenderEmailTemplateRequest = {\n    body_template: string;\n    payload: string;\n    subject_template: string;\n  };\n\n  export const RequestEmailSubscriptionProperties =\n    zodSchemaRequestEmailSubscriptionProperties();\n  export type RequestEmailSubscriptionProperties = {\n    only_admins: boolean;\n  };\n\n  export const Status = zodSchemaStatus();\n  export type Status = 'MAINTENANCE' | 'UP';\n\n  export const UUID = zodSchemaUUID();\n  export type UUID = string;\n\n  export const WebhookProperties = zodSchemaWebhookProperties();\n  export type WebhookProperties = {\n    basic_authentication?: BasicAuthentication | undefined | null;\n    disable_ssl_verification: boolean;\n    method: HttpType;\n    secret_token?: string | undefined | null;\n    url: string;\n  };\n\n  export const __Empty = zodSchema__Empty();\n  export type __Empty = string | undefined;\n\n  function zodSchemaApplication() {\n      return z\n      .object({\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBasicAuthentication() {\n      return z\n      .object({\n          password: z.string().optional().nullable(),\n          username: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroup() {\n      return z\n      .object({\n          actions: z.array(zodSchemaBehaviorGroupAction()).optional().nullable(),\n          bundle: zodSchemaBundle().optional().nullable(),\n          bundle_id: zodSchemaUUID(),\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupAction() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          endpoint: zodSchemaEndpoint().optional().nullable(),\n          id: zodSchemaBehaviorGroupActionId().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBehaviorGroupActionId() {\n      return z\n      .object({\n          behaviorGroupId: zodSchemaUUID(),\n          endpointId: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaBundle() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCamelProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          extras: z.record(z.string()).optional().nullable(),\n          secret_token: z.string().optional().nullable(),\n          sub_type: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaCurrentStatus() {\n      return z\n      .object({\n          end_time: z.string().optional().nullable(),\n          start_time: z.string().optional().nullable(),\n          status: zodSchemaStatus()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionProperties() {\n      return z\n      .object({\n          group_id: zodSchemaUUID().optional().nullable(),\n          ignore_preferences: z.boolean(),\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEmailSubscriptionType() {\n      return z.enum([ 'DAILY', 'INSTANT' ]);\n  }\n\n  function zodSchemaEndpoint() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          description: z.string(),\n          enabled: z.boolean().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string(),\n          properties: z\n          .union([\n              zodSchemaWebhookProperties(),\n              zodSchemaEmailSubscriptionProperties(),\n              zodSchemaCamelProperties()\n          ])\n          .optional()\n          .nullable(),\n          type: zodSchemaEndpointType(),\n          updated: z.string().optional().nullable()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointPage() {\n      return z\n      .object({\n          data: z.array(zodSchemaEndpoint()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEndpointProperties() {\n      return z.unknown();\n  }\n\n  function zodSchemaEndpointType() {\n      return z.enum([ 'webhook', 'email_subscription', 'default', 'camel' ]);\n  }\n\n  function zodSchemaEventLogEntry() {\n      return z\n      .object({\n          actions: z.array(zodSchemaEventLogEntryAction()),\n          application: z.string(),\n          bundle: z.string(),\n          created: z.string(),\n          event_type: z.string(),\n          id: zodSchemaUUID()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventLogEntryAction() {\n      return z\n      .object({\n          details: z.record(z.unknown()).optional().nullable(),\n          endpoint_type: zodSchemaEndpointType(),\n          id: zodSchemaUUID(),\n          invocation_result: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaEventType() {\n      return z\n      .object({\n          application: zodSchemaApplication().optional().nullable(),\n          application_id: zodSchemaUUID(),\n          description: z.string().optional().nullable(),\n          display_name: z.string(),\n          id: zodSchemaUUID().optional().nullable(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaFacet() {\n      return z\n      .object({\n          displayName: z.string(),\n          id: z.string(),\n          name: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaHttpType() {\n      return z.enum([ 'GET', 'POST', 'PUT' ]);\n  }\n\n  function zodSchemaMeta() {\n      return z\n      .object({\n          count: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaNotificationHistory() {\n      return z\n      .object({\n          created: z.string().optional().nullable(),\n          details: z.record(z.unknown()).optional().nullable(),\n          endpointId: zodSchemaUUID().optional().nullable(),\n          id: zodSchemaUUID().optional().nullable(),\n          invocationResult: z.boolean(),\n          invocationTime: z.number().int()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaPageEventLogEntry() {\n      return z\n      .object({\n          data: z.array(zodSchemaEventLogEntry()),\n          links: z.record(z.string()),\n          meta: zodSchemaMeta()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRenderEmailTemplateRequest() {\n      return z\n      .object({\n          body_template: z.string(),\n          payload: z.string(),\n          subject_template: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaRequestEmailSubscriptionProperties() {\n      return z\n      .object({\n          only_admins: z.boolean()\n      })\n      .nonstrict();\n  }\n\n  function zodSchemaStatus() {\n      return z.enum([ 'MAINTENANCE', 'UP' ]);\n  }\n\n  function zodSchemaUUID() {\n      return z.string();\n  }\n\n  function zodSchemaWebhookProperties() {\n      return z\n      .object({\n          basic_authentication: zodSchemaBasicAuthentication()\n          .optional()\n          .nullable(),\n          disable_ssl_verification: z.boolean(),\n          method: zodSchemaHttpType(),\n          secret_token: z.string().optional().nullable(),\n          url: z.string()\n      })\n      .nonstrict();\n  }\n\n  function zodSchema__Empty() {\n      return z.string().max(0).optional();\n  }\n}\n\nexport namespace Operations {\n  // GET /\n  export namespace InternalServiceHttpRoot {\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // GET /admin\n  export namespace AdminServiceDebugRbac {\n    const Rhid = z.string();\n    type Rhid = string;\n    export interface Params {\n      rhid?: Rhid;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin';\n        const query = {} as Record<string, any>;\n        if (params.rhid !== undefined) {\n            query.rhid = params.rhid;\n        }\n\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /admin/status\n  export namespace AdminServiceSetAdminDown {\n    const Status = z.string();\n    type Status = string;\n    export interface Params {\n      status?: Status;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './admin/status';\n        const query = {} as Record<string, any>;\n        if (params.status !== undefined) {\n            query.status = params.status;\n        }\n\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /applications\n  export namespace InternalServiceCreateApplication {\n    export interface Params {\n      body: Schemas.Application;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Application, 'Application', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}\n  export namespace InternalServiceGetApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Application', 200, Schemas.Application>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Application, 'Application', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /applications/{appId}\n  export namespace InternalServiceUpdateApplication {\n    export interface Params {\n      appId: Schemas.UUID;\n      body: Schemas.Application;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /applications/{appId}\n  export namespace InternalServiceDeleteApplication {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /applications/{appId}/eventTypes\n  export namespace InternalServiceGetEventTypes {\n    const Response200 = z.array(Schemas.EventType);\n    type Response200 = Array<Schemas.EventType>;\n    export interface Params {\n      appId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './applications/{appId}/eventTypes'.replace(\n            '{appId}',\n            params.appId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles\n  export namespace InternalServiceGetBundles {\n    const Response200 = z.array(Schemas.Bundle);\n    type Response200 = Array<Schemas.Bundle>;\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /bundles\n  export namespace InternalServiceCreateBundle {\n    export interface Params {\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.Bundle, 'Bundle', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}\n  export namespace InternalServiceGetBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'Bundle', 200, Schemas.Bundle>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Schemas.Bundle, 'Bundle', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /bundles/{bundleId}\n  export namespace InternalServiceUpdateBundle {\n    export interface Params {\n      bundleId: Schemas.UUID;\n      body: Schemas.Bundle;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /bundles/{bundleId}\n  export namespace InternalServiceDeleteBundle {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // GET /bundles/{bundleId}/applications\n  export namespace InternalServiceGetApplications {\n    const Response200 = z.array(Schemas.Application);\n    type Response200 = Array<Schemas.Application>;\n    export interface Params {\n      bundleId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './bundles/{bundleId}/applications'.replace(\n            '{bundleId}',\n            params.bundleId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('GET', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // POST /eventTypes\n  export namespace InternalServiceCreateEventType {\n    export interface Params {\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'EventType', 200, Schemas.EventType>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.EventType, 'EventType', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /eventTypes/{eventTypeId}\n  export namespace InternalServiceUpdateEventType {\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n      body: Schemas.EventType;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 200, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 200) ]\n        })\n        .build();\n    };\n  }\n  // DELETE /eventTypes/{eventTypeId}\n  export namespace InternalServiceDeleteEventType {\n    const Response200 = z.boolean();\n    type Response200 = boolean;\n    export interface Params {\n      eventTypeId: Schemas.UUID;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './eventTypes/{eventTypeId}'.replace(\n            '{eventTypeId}',\n            params.eventTypeId.toString()\n        );\n        const query = {} as Record<string, any>;\n        return actionBuilder('DELETE', path)\n        .queryParams(query)\n        .config({\n            rules: [ new ValidateRule(Response200, 'unknown', 200) ]\n        })\n        .build();\n    };\n  }\n  // PUT /status\n  export namespace InternalServiceSetCurrentStatus {\n    export interface Params {\n      body: Schemas.CurrentStatus;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'__Empty', 204, Schemas.__Empty>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './status';\n        const query = {} as Record<string, any>;\n        return actionBuilder('PUT', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [ new ValidateRule(Schemas.__Empty, '__Empty', 204) ]\n        })\n        .build();\n    };\n  }\n  // POST /templates/email/render\n  export namespace InternalServiceRenderEmailTemplate {\n    const Response200 = z\n    .object({\n        body: z.string().optional().nullable(),\n        subject: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response200 = {\n      body?: string | undefined | null;\n      subject?: string | undefined | null;\n    };\n    const Response400 = z\n    .object({\n        message: z.string().optional().nullable()\n    })\n    .nonstrict();\n    type Response400 = {\n      message?: string | undefined | null;\n    };\n    export interface Params {\n      body: Schemas.RenderEmailTemplateRequest;\n    }\n\n    export type Payload =\n      | ValidatedResponse<'unknown', 200, Response200>\n      | ValidatedResponse<'unknown', 400, Response400>\n      | ValidatedResponse<'unknown', undefined, unknown>;\n    export type ActionCreator = Action<Payload, ActionValidatableConfig>;\n    export const actionCreator = (params: Params): ActionCreator => {\n        const path = './templates/email/render';\n        const query = {} as Record<string, any>;\n        return actionBuilder('POST', path)\n        .queryParams(query)\n        .data(params.body)\n        .config({\n            rules: [\n                new ValidateRule(Response200, 'unknown', 200),\n                new ValidateRule(Response400, 'unknown', 400)\n            ]\n        })\n        .build();\n    };\n  }\n}\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { PageSection, Title } from '@patternfly/react-core';\nimport { PlayIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\nimport { useMemo } from 'react';\n\nconst aggregationTemplate = `\n// Here we can initialize the value of the Aggregation result.\nconst result = {\n};\n\n// This function will be called by every action that was sent to notification server\n// to update the result with its values.\nconst aggregate = (action) => {\n\n    return result;\n};\n`.trimLeft();\n\nexport const AggregationPage: React.FunctionComponent<unknown> = () => {\n\n    const onEditorDidMount = React.useCallback((editor, monaco) => {\n        editor.layout();\n        editor.focus();\n        monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n    }, []);\n\n    const onChange = React.useCallback((_value) => {\n        // does not do anything yet\n    }, []);\n\n    const controls = useMemo(() => [\n        <CodeEditorControl\n            key=\"test\"\n            icon={ <PlayIcon /> }\n            toolTipText=\"Test aggregation\"\n            onClick={ () => console.log('testing') }\n            isVisible={ true }\n        />\n    ], []);\n\n    return <>\n        <PageSection>\n            <Title headingLevel=\"h1\">Aggregation templates</Title>\n        </PageSection>\n        <PageSection>\n            <CodeEditor\n                isDownloadEnabled\n                isUploadEnabled\n                customControls={ controls }\n                isLineNumbersVisible\n                isLanguageLabelVisible\n                isMinimapVisible={ false }\n                language={ Language.javascript }\n                onEditorDidMount={ onEditorDidMount }\n                onChange={ onChange }\n                code={ aggregationTemplate }\n                height=\"300px\"\n            />\n        </PageSection>\n    </>;\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type CreateEventType = {\n    id?: string;\n    displayName: string;\n    description: string;\n    applicationId: string;\n    name: string;\n\n}\n\nconst actionCreator =  (params: CreateEventType) => {\n    if (params.id === undefined) {\n        return Operations.InternalServiceCreateEventType.actionCreator({\n            body: {\n                id: params.id,\n                application_id: params.applicationId,\n                description: params.description,\n                display_name: params.displayName,\n                name: params.name\n\n            }\n        });\n    }\n\n    return Operations.InternalServiceUpdateEventType.actionCreator({\n        eventTypeId: params.id,\n        body: {\n            id: params.id,\n            application_id: params.applicationId,\n            description: params.description,\n            display_name: params.displayName,\n            name: params.name\n\n        }\n    });\n};\n\nexport const useCreateEventType = () => {\n    return useMutation(actionCreator);\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\nimport { Application } from '../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetApplication.Payload) => {\n        if (payload.status === 200) {\n            const applicationTypes: Application = { id: payload.value.id ?? '', displayName: payload.value.display_name };\n\n            return validatedResponse(\n                'Application',\n                200,\n                applicationTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useApplicationTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalServiceGetApplication.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import produce from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useClient } from 'react-fetching-library';\nimport { useUnmountPromise } from 'react-use';\n\nimport { Operations } from '../generated/OpenapiInternal';\nimport { Bundle } from '../types/Notifications';\n\nexport const useBundles = () => {\n    const client = useClient();\n    const mounted = useUnmountPromise();\n\n    const [ bundles, setBundles ] = useState<ReadonlyArray<Bundle>>([]);\n\n    const [ isLoading, setLoading ] = useState<boolean>();\n\n    const query = useCallback(async () => {\n        const cQuery = client.query;\n        setLoading(true);\n\n        const bundleResponse = await cQuery(Operations.InternalServiceGetBundles.actionCreator());\n\n        if (bundleResponse.payload?.status === 200) {\n\n            const bundles: ReadonlyArray<Bundle> = bundleResponse.payload.value.map(bundleResponse => ({\n                id: bundleResponse.id ?? '',\n                displayName: bundleResponse.display_name,\n                applications: []\n            }));\n\n            const applicationsPromises = [];\n            for (const bundle of bundleResponse.payload.value) {\n                if (bundle.id) {\n                    applicationsPromises.push(cQuery(Operations.InternalServiceGetApplications.actionCreator({\n                        bundleId: bundle.id\n                    })));\n                }\n            }\n\n            const applicationResponses = await Promise.all(applicationsPromises);\n\n            const reducedBundles = applicationResponses.map(r => r.payload).reduce((bundles, applications) => produce(bundles, draftBundles => {\n                if (applications?.status === 200) {\n                    const draftBundle = draftBundles.find(b => b.id === applications.value[0].bundle_id);\n                    if (draftBundle) {\n                        draftBundle.applications = applications.value.map(a => ({\n                            id: a.id ?? '',\n                            displayName: a.display_name\n                        }));\n                    }\n                }\n            }), bundles);\n\n            (await mounted(Promise.resolve(() => setBundles((reducedBundles)))))();\n        }\n\n        setLoading(false);\n    }, [ client.query, mounted ]);\n\n    useEffect(() => {\n        query();\n    }, [ query ]);\n\n    return {\n        bundles,\n        isLoading\n    };\n};\n","import { validatedResponse, validationResponseTransformer } from 'openapi2typescript';\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\nimport { EventType } from '../types/Notifications';\n\nconst validateResponse = validationResponseTransformer(\n    (payload: Operations.InternalServiceGetEventTypes.Payload) => {\n        if (payload.status === 200) {\n            const eventTypes: ReadonlyArray<EventType> = payload.value.map(value => ({\n                id: value.id ?? '',\n                name: value.name,\n                displayName: value.display_name,\n                description: value.description ?? '',\n                applicationId: value.application_id\n            }));\n\n            return validatedResponse(\n                'EventTypes',\n                200,\n                eventTypes,\n                payload.errors\n            );\n        }\n\n        return payload;\n    }\n);\n\nexport const useEventTypes = (applicationId: string) => {\n    const query = useQuery(Operations.InternalServiceGetEventTypes.actionCreator({\n        appId: applicationId\n    }));\n\n    const queryPayload = useMemo(() => {\n        const payload = query.payload;\n        if (payload) {\n            return validateResponse(payload);\n        }\n\n        return undefined;\n    }, [ query.payload ]);\n\n    return useMemo(() => ({\n        ...query,\n        payload: queryPayload\n    }), [ query, queryPayload ]);\n};\n","import { useMutation } from 'react-fetching-library';\n\nimport { Operations } from '../generated/OpenapiInternal';\n\nexport type RenderEmailRequest = {\n    subject: string;\n    body: string;\n    payload: string;\n}\n\nconst actionCreator = (params: RenderEmailRequest) => Operations.InternalServiceRenderEmailTemplate.actionCreator({\n    body: {\n        subject_template: params.subject,\n        body_template: params.body,\n        payload: params.payload\n    }\n});\n\nexport const useRenderEmailRequest = () => {\n    return useMutation(actionCreator);\n};\n","import { CodeEditor, Language } from '@patternfly/react-code-editor';\nimport {\n    HelperText,\n    HelperTextItem,\n    PageSection,\n    Spinner,\n    Split,\n    SplitItem,\n    Stack,\n    StackItem,\n    Title\n} from '@patternfly/react-core';\nimport { Button } from '@patternfly/react-core/';\nimport * as React from 'react';\n\nimport { useRenderEmailRequest } from '../services/RenderEmailRequest';\n\nconst defaultSubjectTemplate = `\nImportant email to {user.firstName} from MyCoolApp!\n`.trimLeft();\n\nconst defaultBodyTemplate = `\n<div>Hello {user.firstName} {user.lastName},</div>\n<div>We have some important news for you, MyApp has a notification for you</div>\n<div>As a reminder, current user: {user.username}: is active? {user.isActive}; is admin? {user.isAdmin}</div>\n<div>\n    System with name <strong>{action.context.display_name}</strong> (<strong>{action.context.inventory_id}</strong>) \n    did a check in at {action.context.system_check_in.toUtcFormat()}. \n    It was about {action.context.system_check_in.toTimeAgo()}\n</div>\n<div>This is a loop:</div>\n{#if action.events.size() > 0}\n<ul>\n    {#each action.events}\n        <li>\n            <a href=\"http://google.com?q={it.payload.my_id}\" target=\"_blank\">{it.payload.my_name}</a>\n        </li>\n    {/each}\n</ul>\n<div>Have a nice day!</div>\n{/if}\n`.trimLeft();\n\nconst defaultPayload = JSON.stringify({\n    bundle: 'rhel',\n    application: 'policies',\n    event_type: 'policy-triggered',\n    timestamp: '2021-08-05T16:21:14.243',\n    account_id: '5758117',\n    // eslint-disable-next-line max-len\n    context: '{\"inventory_id\":\"80f7e57d-a16a-4189-82af-1d68a747c8b3\",\"system_check_in\":\"2021-08-05T16:21:12.953036\",\"display_name\":\"cool display name\"}',\n    events: [\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"3df53241-3e09-481b-a322-4892caaaaadc\",\"my_name\":\"Red color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"6c5e8451-a40a-4bb7-ab9a-0cb10a4c577d\",\"my_name\":\"Green color\"}'\n        },\n        {\n            metadata: {},\n            payload: '{\"my_id\":\"b4c6378a-c1fb-4d3e-8e9b-7e5bdfc09dd3\",\"my_name\":\"Blue color\"}'\n        }\n    ]\n}, null, 2);\n\ntype RenderedTemplateProps = {\n    isLoading: true;\n} | {\n   isLoading: false;\n   succeeded: true;\n   subject: string;\n   body: string;\n} | {\n    isLoading: false;\n    succeeded: false;\n    error: string;\n};\n\nconst RenderedTemplate: React.FunctionComponent<RenderedTemplateProps> = props => {\n    if (props.isLoading) {\n        return <Spinner />;\n    }\n\n    if (props.succeeded) {\n        return (\n            <>\n                <StackItem>\n                    <span><strong>Subject:</strong> { props.subject }</span>\n                </StackItem>\n                <StackItem>\n                    <strong>Body:</strong>\n                </StackItem>\n                <StackItem>\n                    <iframe width=\"100%\" srcDoc={ props.body } />\n                </StackItem>\n            </>\n        );\n    }\n\n    return (\n        <StackItem>\n            <HelperText>\n                <HelperTextItem variant=\"error\">{ props.error }</HelperTextItem>\n            </HelperText>\n        </StackItem>\n    );\n};\n\nexport const RenderEmailPage: React.FunctionComponent = () => {\n    const emailTemplate = useRenderEmailRequest();\n    const [ subjectTemplate, setSubjectTemplate ] = React.useState<string | undefined>(defaultSubjectTemplate);\n    const [ bodyTemplate, setBodyTemplate ] = React.useState<string | undefined>(defaultBodyTemplate);\n    const [ payload, setPayload ] = React.useState<string | undefined>(defaultPayload);\n\n    React.useEffect(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n        // We only want to activate this once\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ ]);\n\n    let renderedProps: RenderedTemplateProps;\n\n    if (emailTemplate.loading) {\n        renderedProps = {\n            isLoading: true\n        };\n    } else if (emailTemplate.payload?.status === 200) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: true,\n            subject: emailTemplate.payload.value.subject ?? '',\n            body: emailTemplate.payload.value.body ?? ''\n        };\n    } else if (emailTemplate.payload?.status === 400) {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: emailTemplate.payload.value.message ?? 'Unknown error'\n        };\n    } else {\n        renderedProps = {\n            isLoading: false,\n            succeeded: false,\n            error: 'Unknown error'\n        };\n    }\n\n    const onRender = React.useCallback(() => {\n        const mutate = emailTemplate.mutate;\n        mutate({\n            subject: subjectTemplate ?? '',\n            body: bodyTemplate ?? '',\n            payload: payload ?? ''\n        });\n    }, [ emailTemplate.mutate, subjectTemplate, bodyTemplate, payload ]);\n\n    return (\n        <>\n            <PageSection>\n                <Split>\n                    <SplitItem isFilled>\n                        <Title headingLevel=\"h1\" >Email templates</Title>\n                    </SplitItem>\n                    <SplitItem>\n                        <Button onClick={ onRender }>Render</Button>\n                    </SplitItem>\n                </Split>\n            </PageSection>\n            <PageSection>\n                <Stack>\n                    <StackItem>\n                        <Title headingLevel=\"h2\">Result</Title>\n                    </StackItem>\n                    <RenderedTemplate { ...renderedProps }  />\n                </Stack>\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Subject template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultSubjectTemplate }\n                    height=\"50px\"\n                    onChange={ setSubjectTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Body template</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultBodyTemplate }\n                    height=\"300px\"\n                    onChange={ setBodyTemplate }\n                />\n            </PageSection>\n            <PageSection>\n                <Title headingLevel=\"h2\">Payload</Title>\n                <CodeEditor\n                    isLineNumbersVisible\n                    isMinimapVisible={ false }\n                    code={ defaultPayload }\n                    height=\"300px\"\n                    isLanguageLabelVisible\n                    language={ Language.json }\n                    onChange={ setPayload }\n                />\n            </PageSection>\n        </>\n    );\n};\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\n\nimport { AggregationPage } from './pages/AggregationPage';\nimport { ApplicationPage } from './pages/ApplicationPage';\nimport { RenderEmailPage } from './pages/RenderEmailPage';\n\ninterface Path {\n    readonly path: string;\n    readonly component: React.ComponentType;\n}\n\nexport const linkTo = {\n    application: (applicationId: string) => `/application/${applicationId}`,\n    aggregation: () => '/aggregation',\n    email: () => '/email'\n};\n\nconst pathRoutes: Path[] = [\n    {\n        path: linkTo.aggregation(),\n        component: AggregationPage\n    },\n    {\n        path: linkTo.application(':applicationId'),\n        component: ApplicationPage\n    },\n    {\n        path: linkTo.email(),\n        component: RenderEmailPage\n    }\n];\n\nexport const Routes: React.FunctionComponent<unknown> = _props => {\n    return (\n        <Switch>\n            { pathRoutes.map(pathRoute => (\n                <Route\n                    key={ pathRoute.path }\n                    component={ pathRoute.component }\n                    path={ pathRoute.path }\n                />\n            )) }\n            <Redirect to={ linkTo.aggregation() } />\n        </Switch>\n    );\n};\n","import { Breadcrumb, BreadcrumbItem, Button, Modal, ModalVariant, PageSection, Spinner, Title, Toolbar,\n    ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport {\n    ActionGroup,\n    Form,\n    FormGroup, TextArea,\n    TextInput  } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport {\n    TableComposable,\n    Tbody,\n    Td,  Th,   Thead,\n    Tr } from '@patternfly/react-table';\nimport * as React from 'react';\nimport { useParams } from 'react-router';\n\nimport { useCreateEventType } from '../services/CreateEventTypes';\nimport { useApplicationTypes } from '../services/GetApplication';\nimport { useBundles } from '../services/GetBundles';\nimport { useEventTypes } from '../services/GetEventTypes';\nimport { EventType } from '../types/Notifications';\n\ntype ApplicationPageParams = {\n    applicationId: string;\n}\n\nexport const ApplicationPage: React.FunctionComponent = () => {\n    const { applicationId } = useParams<ApplicationPageParams>();\n    const eventTypesQuery = useEventTypes(applicationId);\n    const applicationTypesQuery = useApplicationTypes(applicationId);\n    const getBundle = useBundles();\n    const columns = [ 'Event Type', 'Name', 'Description', 'Event Type Id' ];\n\n    const newEvent = useCreateEventType();\n    const [ eventType, setEventType ] = React.useState<Partial<EventType>>({});\n\n    const [ showModal, setShowModal ] = React.useState(false);\n    const [ isEdit, setIsEdit ] = React.useState(false);\n\n    const createEventType = () => {\n        setShowModal(true);\n        setIsEdit(false);\n        setEventType({});\n    };\n\n    const handleSubmit = React.useCallback(() => {\n        setShowModal(false);\n        const mutate = newEvent.mutate;\n        mutate({\n            id: eventType.id,\n            displayName: eventType.displayName ?? '',\n            name: eventType.name ?? '',\n            description: eventType.description ?? '',\n            applicationId\n\n        }).then(eventTypesQuery.query);\n\n    }, [ newEvent.mutate, eventType, applicationId, eventTypesQuery.query ]);\n\n    const handleChange = (value: string, event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n        const target = event.target as HTMLInputElement;\n        setEventType(prev => ({ ...prev, [target.name]: target.value }));\n    };\n\n    const editEventType = (e: EventType) => {\n        setShowModal(true);\n        setIsEdit(true);\n        setEventType(e);\n    };\n\n    if (eventTypesQuery.loading) {\n        return <Spinner />;\n    }\n\n    if (eventTypesQuery.payload?.status !== 200) {\n        return <span>Error while loading eventtypes: {eventTypesQuery.errorObject.toString()}</span>;\n    }\n\n    if (eventTypesQuery.payload.value.length === 0) {\n        return <span>No event types found for this application</span>;\n    }\n\n    return (\n        <React.Fragment>\n            <PageSection>\n                <Title headingLevel=\"h1\"><Breadcrumb>\n                    <BreadcrumbItem to='#'> { getBundle.isLoading ?\n                        <Spinner /> : getBundle.bundles.map(bundle => bundle.displayName)} </BreadcrumbItem>\n                    <BreadcrumbItem to='#' isActive> { (applicationTypesQuery.loading || applicationTypesQuery.payload?.status !== 200) ?\n                        <Spinner /> : applicationTypesQuery.payload.value.displayName } </BreadcrumbItem>\n                </Breadcrumb></Title>\n                <TableComposable\n                    aria-label=\"Event types table\"\n                >\n                    <Thead>\n                        <Toolbar>\n                            <ToolbarContent>\n                                <ToolbarItem>\n                                    <Button variant='primary' type='button'\n                                        onClick={ createEventType }> Create Event Type </Button>\n                                    <Modal\n                                        variant={ ModalVariant.medium }\n                                        title={ `${ isEdit ? 'Update' : 'Create'} Event Type for ${ (applicationTypesQuery.loading ||\n                                            applicationTypesQuery.payload?.status !== 200) ?\n                                            <Spinner /> : applicationTypesQuery.payload.value.displayName }` }\n                                        isOpen={ showModal }\n                                        onClose={ () => setShowModal(false) }\n                                    ><Form isHorizontal>\n                                            <FormGroup label='Name' fieldId='name' isRequired\n                                                helperText='This is a short name, only composed of a-z 0-9 and - characters.'>\n                                                <TextInput\n                                                    type='text'\n                                                    defaultValue={ eventType.name }\n                                                    onChange={ handleChange }\n                                                    id='name'\n                                                    name=\"name\"\n                                                /></FormGroup>\n                                            <FormGroup label='Display name' fieldId='display-name' isRequired\n                                                helperText='This is the name you want to display on the UI'>\n                                                <TextInput\n                                                    type='text'\n                                                    defaultValue={ eventType.displayName }\n                                                    name=\"displayName\"\n                                                    onChange={ handleChange }\n                                                    id='display-name' /></FormGroup>\n                                            <FormGroup label='Description' fieldId='description'\n                                                helperText='Optional short description that appears in the UI\n                                                to help admin descide how to notify users.'>\n                                                <TextArea\n                                                    type='text'\n                                                    defaultValue={ eventType.description }\n                                                    onChange={ handleChange }\n                                                    id='description'\n                                                    name=\"description\" /></FormGroup>\n                                            <ActionGroup>\n                                                <Button variant='primary' type='button'\n                                                    { ...(newEvent.loading || newEvent.payload?.status !== 200) ?\n                                                        <Spinner /> : eventTypesQuery.payload.value }\n                                                    onClick={ handleSubmit }>\n                                                    {isEdit ? 'Update' : 'Submit' }</Button>\n                                                <Button variant='link' type='reset'\n                                                    onClick={ () => setShowModal(false) }>Cancel</Button>\n                                            </ActionGroup>\n                                        </Form>\n                                        <>\n                                        </>\n                                    </Modal>\n                                </ToolbarItem>\n                            </ToolbarContent>\n                        </Toolbar>\n                        <Tr>\n                            {columns.map((column, columnIndex) => (\n                                <Th key={ columnIndex }>{column}</Th>\n                            ))}\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        { eventTypesQuery.payload.value.map(e => (\n                            <Tr key={ e.id }>\n                                <Td>{ e.displayName }</Td>\n                                <Td>{ e.name }</Td>\n                                <Td>{ e.description }</Td>\n                                <Td>{ e.id }</Td>\n                                <Td>\n                                    <Button className='edit' type='button' variant='plain'\n                                        onClick={ () => editEventType(e) }> { <PencilAltIcon /> } </Button></Td>\n                            </Tr>\n                        ))}\n                    </Tbody>\n                </TableComposable>\n            </PageSection>\n        </React.Fragment>\n\n    );\n};\n","import { Nav, NavExpandable, NavGroup, NavItem, NavItemSeparator, NavList } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport { linkTo } from '../Routes';\nimport { Bundle } from '../types/Notifications';\n\ntype EnhancedNavItemProps = {\n    to: string;\n}\n\nconst EnhancedNavItem: React.FunctionComponent<EnhancedNavItemProps> = props => {\n    const match = useRouteMatch({\n        path: props.to,\n        exact: true\n    });\n\n    return (\n        <NavItem isActive={ !!match }>\n            <Link to={ props.to }>\n                { props.children }\n            </Link>\n        </NavItem>\n    );\n};\n\nexport interface NavigationProps {\n    bundles: ReadonlyArray<Bundle>;\n}\n\nexport const Navigation: React.FunctionComponent<NavigationProps> = props => {\n    return (\n        <Nav>\n            <NavList>\n                <NavGroup title=\"Bundles\">\n                    { props.bundles.map(b => (\n                        <NavExpandable key={ b.id } title={ b.displayName }>\n                            { b.applications.map(a => (\n                                <EnhancedNavItem key={ a.id } to={ linkTo.application(a.id) }>{ a.displayName }</EnhancedNavItem>\n                            )) }\n                        </NavExpandable>\n                    )) }\n                </NavGroup>\n                <NavItemSeparator />\n                <EnhancedNavItem to={ linkTo.email() }>\n                    Email templates\n                </EnhancedNavItem>\n                <EnhancedNavItem to={ linkTo.aggregation() }>\n                    Aggregation\n                </EnhancedNavItem>\n            </NavList>\n        </Nav>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/redhat-logo.f7405300.svg\";","import '@patternfly/react-core/dist/styles/base.css';\nimport './app.css';\n\nimport { Brand, Page, PageHeader, PageSection, PageSidebar, Spinner } from '@patternfly/react-core';\nimport React from 'react';\n\nimport { Routes } from '../Routes';\nimport { useBundles } from '../services/GetBundles';\nimport { Navigation } from './Navigation';\nimport logo from './redhat-logo.svg';\n\nexport const App: React.FunctionComponent<unknown> = () => {\n\n    const [ isNavOpen, setNavOpen ] = React.useState(true);\n\n    const onNavToggle = React.useCallback(() => setNavOpen(prev => !prev), [ setNavOpen ]);\n\n    const bundles = useBundles();\n\n    const appHeader = <PageHeader\n        showNavToggle\n        logo={ <Brand width=\"150px\" src={ logo } alt=\"Red Hat\" /> }\n        logoProps={ { href: '/internal' } }\n        isNavOpen={ isNavOpen }\n        onNavToggle={ onNavToggle }\n    />;\n\n    if (bundles.isLoading) {\n        return (\n            <Page\n                header={ appHeader }\n            >\n                <PageSection>\n                    <Spinner />\n                </PageSection>\n            </Page>\n        );\n    }\n\n    const appSidebar = <PageSidebar nav={ <Navigation bundles={ bundles.bundles } /> } isNavOpen={ isNavOpen } />;\n\n    return (\n        <Page\n            sidebar={ appSidebar }\n            header={ appHeader }>\n            <Routes />\n        </Page>\n    );\n};\n","import '@patternfly/react-core/dist/styles/base.css';\n\nimport { validateSchemaResponseInterceptor } from 'openapi2typescript/react-fetching-library';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ClientContextProvider, createClient } from 'react-fetching-library';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app/App';\n\nconst client = createClient({\n    responseInterceptors: [ validateSchemaResponseInterceptor ]\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ClientContextProvider client={ client }>\n                <App />\n            </ClientContextProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}